[{"body":" Work in progress\nContent under construction: the set of values is not accepted and not convenient for use yet.  1. Common goals are more important than individual.  Pull issues from backlog rather than be pushed by someone. It is good to share practices between teams. We have mentors. We can ask anyone to be mentor.  Practices \u0026amp; rituals: blocking code-review, communities, onboarding check-list with a required mentor\nAntipattern Overfulfill your own tasks while your colleague can not finish in time and you were able to help.   2. We accept mistakes and learn from them.  We must offer and test fast our ideas, even the craziest. We are not afraid to take the first step, fall into the dirt, rise, shake off, write a post mortem with clean hands, and go the other way. Mistakes make us stronger only if we have post-mortem and avoid repetition. Mistakes term do not include intentional violation of the rules or laziness.  Practices \u0026amp; rituals: fail fast rule, post-mortems\nAntipattern Unprofitable product continues to develop for a long time because it is scary to admit a mistake.  3. We respect colleagues and their time.  We respect team rules. We prefer non-formal style of communication to officialism. We know goals of every meeting and record all decisions. We may work remotely.  Practices \u0026amp; rituals: online meetings requirement, availability of the tools, daily meetings, planning, retrospectives, required agenda in invitation, after event message\nAntipattern 1 hour meeting with 30 participants without agenda and written conclusions.  4. We give and request constructive feedback.  We prefer non-violent communication. We discuss facts, not emotions or personality.  Practices \u0026amp; rituals: BORD, did something — ask for feedback\nAntipattern Your code is a shitty piece of spaghetti.  5. Your job is safe, your role is not.  We support new skills development. Changing of role and team and staying in a company is better than leave.  Practices \u0026amp; rituals: internal rotation\nAntipattern After one year of work notice that not learned anything new.  ","excerpt":"Work in progress\nContent under construction: the set of values is not accepted and not convenient …","ref":"/lmru--tech/values/people/","title":"People"},{"body":"Леруа Мерлен (в оригинале, «Leroy Merlin», произносить с акцентом) – французская компания ритейлер, лидер по товарообороту в Европе в секторе Do It Yourself.\nНа сегодня около 500 гипермаркетов Леруа в 13 странах: Греция, Бразилия, Франция, Италия, Польша, Португалия, Испания, Россия, Китай, Кипр, Румыния, Украина и Казахстан.\n","excerpt":"Леруа Мерлен (в оригинале, «Leroy Merlin», произносить с акцентом) – французская компания ритейлер, …","ref":"/lmru--tech/ru/about/","title":"О Леруа Мерлен Россия"},{"body":"Leroy Merlin (in Russian, «Леруа Мерлен») is a French retail company. Leroy Merlin is the number 1 Do It Yourself chain in Europe by turnover.\nThere are about 500 Leroy Merlin hypermarkets in 13 countries: Greece, Brazil, France, Italy, Poland, Portugal, Spain, Russia, China, Cyprus, Romania, Ukraine and Kazakhstan.\n","excerpt":"Leroy Merlin (in Russian, «Леруа Мерлен») is a French retail company. Leroy Merlin is the number 1 …","ref":"/lmru--tech/about/","title":"About Leroy Merlin Russia"},{"body":" Work in progress\nContent under construction: the set of values is not accepted and not convenient for use yet.  1. We care about API cleanness.  All business services exposes their APIs on the Developer Portal.  internal  We are following API Design Principles. We use REST API for synchronous and all our API level 2 mature. We use AMQP or Kafka for asynchronous communication. Non compliant APIs should declared as a technical debt and to be changed. Services do not provide a client library. The API and its data model are expressed as REST and JSON.  Practices \u0026amp; rituals: 30% rule\nAntipattern GraphQL or GRPC endpoint exposed for external usage.   2. We use modular architecture.  Modules are isolated and loosely coupled. Modules have single responsibility. We can throw away existing, add on new or change sequence of modules execution safely without impact on other functionality. We periodically review important architecture and technical debt issues.  Practices \u0026amp; rituals: high cohesion, external configuration, orchestration/choreography, Solution Architect Review\nAntipattern Microservices with hardcoded steps and multiple entries.   3. We develop only economically sustainable products.  We avoid duplication of systems functionality. Every system have single mantainer team.  Practices \u0026amp; rituals: revenue / expenses ratio, KISS\nAntipattern We are using some technology only because of hype or fashion.  ","excerpt":"Work in progress\nContent under construction: the set of values is not accepted and not convenient …","ref":"/lmru--tech/values/architecture/","title":"Architecture"},{"body":" Work in progress\nContent under construction: the set of values is not accepted and not convenient for use yet.  We as IT want to build Retailer — technology company-platform.\nOur mission is to bring autonomy to product teams, support it with tools and governance to increase productivity and ensure the required level of quality.\nThis site collects what is acceptable for us on the way to our mission.\n","excerpt":"Work in progress\nContent under construction: the set of values is not accepted and not convenient …","ref":"/lmru--tech/values/","title":"Leroy Merlin Technology Values"},{"body":" Work in progress\nПока не переведено на русский. Переключитесь, пожалуйста, на английский.  ","excerpt":" Work in progress\nПока не переведено на русский. Переключитесь, пожалуйста, на английский.  ","ref":"/lmru--tech/ru/values/","title":"Инженерные ценности Леруа Мерлен"},{"body":"We don\u0026rsquo;t use a mono stack approach. Our wide stack gives us the possibility to use the best tools for each use case, helps to model tech future, to develop skills and avoid tech and vendor lock-in.\nHere are the main influences to select the right technologies:  Current and future capability to develop and support component in terms of workforce Maturity of a technology Types of components (business logic, system, and middle-level software) Architecture patterns (loose coupling, monolithic) Development patterns (frameworks, code transparency, etc.) Specific of using (type of load, sensitivity of data, etc.) Licensing policy  Technology stack life cycle We have the practice to update the technology table. During Technology Committee we decide which technology needs to start research or try in production systems. We confirm change technologies for the best choice section.\nDecisions records  Technology table To make the process of choosing technology more clear and simple we going to have a table, where we have an area (DB, Frontend, backend, etc.), use cases like CRUD API, BFF, Process orchestration and so on. For each use case, we have the technology (programming language, framework, product ) and our attitude to this. Attitude shows: is it the best choice, on research or on the trial stage. We have the hold section where located unaccepted or ancient technologies. Our attitude to each technology has an explanation of why.\n","excerpt":"We don\u0026rsquo;t use a mono stack approach. Our wide stack gives us the possibility to use the best …","ref":"/lmru--tech/stack/","title":"Technology Stack"},{"body":"Мы не используем подход с моностеком. Благодаря обширному стеку технологий мы выбираем подходящий инструмент для конкретной задачи, не застываем в прошлом, наращиваем экспертизу и не привязываемся к определённому вендору или технологии.\nЧто влияет на выбор:  Текущий и потенциальный рынок специалистов Зрелость технологии Тип компонента (бизнес логика, система, миддл) Архитектурные паттерны Паттерны разработки Специфика использования (характер нагрузки, параметры безопасности, и т.д.) Политика лицензирования  Жизненный цикл тех стека Мы периодически обновляем таблицу технологий на собраниях под названием «Technology Committee», выбираем технологии, которые будем пробовать. Если всё идёт пучком, то технология рано или поздно перейдёт в колонку best choice.\nИстория изменений  Таблица технологий Для облегчения выбора предлагается таблица, в которой есть колонки area — сфера применения и use case — как именно используем. Например, выставляем CRUD API, выбираем BFF или запиливаем оркестратор. Для каждого кейса использования подобрана технология – язык, фреймворк или продукт, и наше отношение к ней:\n best choice — круто, надо брать trial stage – обкатывается в лимитированной версии на проде research – пробуем играться, пока не понятно hold — пробовали, наигрались, хватит  ","excerpt":"Мы не используем подход с моностеком. Благодаря обширному стеку технологий мы выбираем подходящий …","ref":"/lmru--tech/ru/stack/","title":"Стек технологий"},{"body":"API Management is the core strategy to build platform business model \u0026amp; support product teams transformation. It allows to improve Time To Market, decrease risk of security breaches \u0026amp; business continuity, significantly decrease costs by reusing components, provides transparency on quality of services, impact, technical debt \u0026amp; landscape visibility.\n  Synchronous\nDesign Principles A sender application sends a request to a receiver and must wait for a reply before it can continue with its processing. This pattern is typically used in scenarios where data requests need to be coordinated in a sequential manner.\n   Asynchronous A sender application sends a message to a receiver and continues its processing before receiving a response. In other words, the sender application does not depend on the receiver to complete its processing.\n  All company endpoints divided by domains are available on  Developers Portal (internal, for now).\n","excerpt":"API Management is the core strategy to build platform business model \u0026amp; support product teams …","ref":"/lmru--tech/api/","title":"API"},{"body":"API Менеджмент — важное направление при построении компании платформы и поддержке трансформации продуктовых команд. Грамотная работа с API ускорит Time To Market, снизит риск утечек информации и нарушения неприрывности бизнеса, срежет косты благодаря переиспользованию, повысит прозрачность качества сервиса, ландшафта систем и технического долга.\n  Синхронные\nДизайн Принципы Приложение отправляет запрос получателю и ожидает ответа, на время приостановив работу. Как правило, подход применяют для простоты, либо необходимо сохранить порядок вызовов систем.\n   Асинхронные\nДизайн Принципы Приложение отправляет сообщение получателю и продолжает свою работу, не дожидаясь ответа. Как правило, подход применяют в том случае, когда результат выполнения не зависит от ответа сторонней системы.\n  Все API компании, поделённые по доменам, доступны на  Портале Разработчиков. (пока, правда, только для внутренних пользователей)\n","excerpt":"API Менеджмент — важное направление при построении компании платформы и поддержке трансформации …","ref":"/lmru--tech/ru/api/","title":"API"},{"body":"Well-designed REST API attract developers to build apps that use them. An API interface should be easy to understand and intuitive to the developers.\n   Level 0 — Legacy Single URI and HTTP method\n(typically POST)\nUsing XML to communicate\n   Level 1 — Resources To be compliant with level 1, our API must be using resources that reside at their URLs.\n   Level 2 — Verbs This level also requires us to use correct HTTP methods for operating on the resources, status codes, support paging, filtering, sorting, searching and versioning.\n    Our strategy is to achieve Level 2 on all our APIs.\nURI Path Design https:// api.leroymerlin.ru / domain / application / v1 / products?siteId=1234\u0026amp;statusCode=active \\_____/\\___________________/\\_______/\\____________/\\___/\\_________/\\___________________________/ scheme host LM domain system major resource query parameters group name version Use spinal-case for URLs and camelCase for parameters and attributes.  Each resource have their own endpoint. Resource name always in the plural. If a resource is related to another resource, use sub-resources. Limit to 1 level of depth. /suppliers/{id}/products/{id}/media/{id} too much inheritance   You can use singular form when only one resource of a type exists (natural singleton) /delivery/v1/products there are no more deliveries    Good examples /customers all customers /customers/{id}/addresses all addresses of customer {id} /products?supplierId={supplierId} get a list of products from a supplier /products/{id} get the detail of a product /products/{id}/media list all media for a product  Moderate granularity. Do not return unnecessary information.\n/clients/1/address { “road”: “121 rue Chanzy”, “city”: “Hellemmes”, “country”: “France”, “age”: 22 }   Use surrogate keys when it is appropriate. The Surrogate key is internally generated by the system but is nevertheless visible to the user or application as opposed to Natural key that is formed of attributes that already exist in the real world.\nREST APIs should try to be discoverable. Don’t use rowID as API resource identifier because, in case of replacing the database, it could violate the integrity of integrations based on API. Also, it is not recommended to use real database keys for security reasons.\nGood examples /some-resource?tag=green natural key “green” has meaning to users\n/customer/0012345 customer ID is an API generated value  Bad examples /some-resource?tag=1 returns all resources tagged with «green» via tag number «1»\n/customer/23dde7-e89b-12d3-a456-4265 customer ID is UUID value used as DB primary key  HTTP Verbs  GET obtaining data POST creation data PUT overwriting by the new data sent PATCH partial update of the data DELETE delete data OPTIONS returns the HTTP methods that the server supports for the specified URL  Wrong behaviour  only POST usage action verb usage usage of pattern /collections/{resource}:{action}   URL Query Parameters Header parameters Contains technical parameters or elements of «context».\nContent-Type: application/json ADEO-BU-CODE: 10 Path parameters These are parameters that are part of the URL. They are used to identify a resource. /product/{id}/stocks  Query parameters They allow the response to be filtered according to certain criteria.\nGood examples /products?q=Luke+man searches for products with the text specified /products?storeId=35 filters all products where storeId is 35 /products?sort=name\u0026amp;desc=age,id sorts by name in ascending order and descending: age then id.  Pagination Good examples ?page=2\u0026amp;perPage=100 paginate by page number ?limit=25\u0026amp;before=ZDMyNz6yORI3OTLo paginate by cursor\n?limit=25\u0026amp;offset=50 paginate through offset \u0026amp; limit\n?limit=25\u0026amp;since=1364849754 paginate with timelines  Time pagination is used to navigate through results data using Unix timestamps which point to specific times in a list of data.\nDon\u0026rsquo;t store cursors. Cursors can quickly become invalid if items are added or deleted.\nResponse: Conventions  HTTP response data structure should be decoupled from the database data structure all fields should make sense to a business person all names used should be simple, intuitive and consistent avoid technical values or values from an information system  Response: Status Codes All methods  Standard Codes must be used for all rest API. Every service must potentially return a 500 error. Every service with, at least, one required parameter must return a 4xx class of response with the explanation of error. Every secured service MUST return a 401 status code  GET  Every one resource service must return a 404 status code (in case of data not found). Every collection service must return a 200 status code if return all the collection in one call. Every collection service should return a 206 status code if return only a part of the the collection in one call.  POST  Every secured service must return a 401 status code.  PUT \u0026amp; PATCH:  Every service used to create a resource must return a 201 status code.  DELETE  Every service must return a 204 status code.  HTTP response: Error Codes Along with the HTTP response status code, the sample error response payload should also be specified. This helps the consumer application parse error messages. The error response payload may include specific business error codes and descriptive error messages that offer information about the exact cause of the error. All error codes and error messages should be defined in the API documentation.\nOne of the popular standards that cover error reporting is JSON-API:\n{ \u0026quot;errors\u0026quot;: [{ \u0026quot;code\u0026quot;: \u0026quot;ERR-01234\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;OAuth Exception\u0026quot;, \u0026quot;details\u0026quot;: \u0026quot;Session has expired at unix time 1385243766.\u0026quot;, \u0026quot;links\u0026quot;: { \u0026quot;about\u0026quot;: \u0026quot;http://example.com/docs/errors/#ERR-01234\u0026quot; } }] } A snippet of a Swagger format specification in an API document, with the response code and error codes defined:\n{ Responses: ”200”: description: mySuccessResponse Schema: type: array Items: $ref: “#/definitions/Pet”, “400”: description: Invalid status value } Responses: data conventions E.164 – phone number format [+][country code][area code][local phone number]\n + plus sign country code international country code area code/national destination code code without leading 0 phone number local phone number  ISO 639 – language  eng – English fra – French rus – Russian  ISO 3166-1 — language  Russia (Russian Federation) Россия RU RUS 643 France Франция FR FRA 250 China Китай CN CHN 156  ISO 8601 – Date  YYYY-MM 2020-06 YYYYMMDD 20200602 YYYY-MM-DDThh:mm:ss 2020-06-02T15:22:00 YYYY-MM-DDThh:mm:ss±hh 2020-06-02T15:22:00+03:00  ISO 4217 — Money  EUR 978 – Euro USD 840 - US Dollar KZT 398 – Tenge BYN 933 - Belarussian Ruble  UCUM – measurements For all measurements check UCUM specification.\n","excerpt":"Well-designed REST API attract developers to build apps that use them. An API interface should be …","ref":"/lmru--tech/api/sync/","title":"Synchronous API Design Principles"},{"body":" Work in progress\nContent under construction: the set of values is not accepted and not convenient for use yet.  1. All codebase should be compliant with InnerSource requirements.  Codebase should be accessible for every employee and stored in GitHub. Non compliant repositories should declared as a technical debt and changed. Code review is mandatory.  Practices \u0026amp; rituals: 30% rule\nAntipattern Closed repository without readme and maintainers working in production.   2. We are automate everything as much as possible.  We prefer automated tests rather than manual testing. Build \u0026amp; Deploy should be done automatically or by manual click on CI tool.  Practices \u0026amp; rituals: DevOps\nAntipattern It is scary to make release because of plenty of manual work and rare occasion.   3. Choice of technology should be aligned with Technology Table.  Table is kept up-to-date by technology committee. We support iniciatives to try new technology or approach after notice of technology committee.  Practices \u0026amp; rituals: Technology Committee\nAntipattern Manager orders an external company to write a non-maintainable black-box application on 1C.   4. Front applications follows design system.  It is recommended to use starters provided by design team. All business settings are configurable through UI.  Antipattern Built in store application uses Comic Sans.   5. We build cloud native applications.  When possible applications runs inside containers using container orchestrator. We prefer stateless applications Applications exposes data for analysis and monitoring. Requests are traceable. Applications can be scaled horizontally. Applications and databases are replicated and can be sharded. Configuration of applications should be done in environment and not locked in application. System classified for security risks and using appropriate mechanisms. Services provides SLA for endpoints.  Practices \u0026amp; rituals: distributed tracing, RBAC, encryption, valet\nAntipattern Monolith uses stored procedures in the database and run in plain hardware.   6. We build robust applications and infrastructure.  We response accurately and correctly handle wrong inputs. We handle partial outages Our key systems are covered with master-master replication.  Practices \u0026amp; rituals: disaster recovery, cache answers, degraded mode, retry, timeout, circuit breaker, tolerant reader\nAntipattern Client can\u0026rsquo;t order because email system is broken.  ","excerpt":"Work in progress\nContent under construction: the set of values is not accepted and not convenient …","ref":"/lmru--tech/values/technology/","title":"Technology"},{"body":"Отлично сконструированный REST API привлекает других разработчиков его использовать. Идеальное API интуитивно понятное для разработчиков, в нём легко разобраться.\n   Уровень 0\nЛегаси Единственный URI и HTTP метод (как правило POST) и использование XML.\n   Уровень 1\nРесурсы Каждому ресурсу отдельный эндпоинт, можно и на JSON перейти.\n   Уровень 2\nHTTP-глаголы Используем правильные HTTP методы, статус коды, поддерживаем фильтрацию, пагинацию, поиск, сортировку и версионирование.\n    Наша стратегия — достигнуть 2 уровня на всех API компании.\nПостроение URI https:// api.leroymerlin.ru / domain / application / v1 / products?siteId=12\u0026amp;statusCode=active \\_____/\\___________________/\\_______/\\____________/\\___/\\_________/\\___________________________/ схема хост домен система версия ресурс параметры запроса Используй spinal-case для URL-ов и camelCase для параметров и аттрибутов.  У каждого ресурса свой эндпоинт. Название ресурса всегда в множественном числе. Если ресурс относится к другому, используй вложенноссть. Максимальная вложенность — 1. /suppliers/{id}/products/{id}/media/{id} слишком глубоко   Допускается использование единственного числа там, где других таких же предметов быть не может /delivery/v1/products не бывает иных обьектов delivery    Хорошие примеры /customers все кастомеры /customers/{id}/addresses все адреса конкретного кастомера /products?supplierId={supplierId} список продуктов по поставщику /products/{id} детали определённого продукта /products/{id}/media список медиа одного продукта  Умеренная гранулярность. Не надо возвращать информацию, которую не спрашивали.\n/clients/1/address { “road”: “121 rue Chanzy”, “city”: “Hellemmes”, “country”: “France”, “age”: 22 — возраст здесь лишний }   Используй Суррогатные ключи правильно. Суррогатный ключ — это ключ, искуственно сгенерированый системой. Не надо путать суррогатный ключ с первичным ключом базы данных. Ещё бывают натуральные ключи, сформированные из атрибутов, существующих в реальной жизни.\nВ REST API качестве ключа по возможности следует использовать натуральные ключи, а также стоит избегать использования первичных ключей БД, так как при смене базы данных, у нас могут быть проблемы с интеграцией, да и вообще — это не секьюрно.\nХорошие примеры /some-resource?tag=green натуральный ключ “green” понятен пользователям\n/customer/0012345 кастомер ID - суррогатный ключ для этого API  Плохие примеры /some-resource?tag=1 вернуть всё с тегом «green» через его id «1»\n/customer/23dde7-e89b-12d3-a456-4265 кастомер ID это UUID, сгенерированный БД  HTTP-методы  GET получить POST создать PUT перезаписать PATCH частично обновить DELETE удалить OPTIONS вернуть все HTTP-методы, доступные для эндпоинта  Некорректное поведение  использование везде только POST использование кастомных HTTP методов использоваие паттерна /collections/{resource}:{action}   URL параметры запросов Заголовки Содержит технические параметры или элементы контекста.\nContent-Type: application/json ADEO-BU-CODE: 10 Path параметры Эти параметры — часть URL. С их помощью можно понять, к какому ресурсу мы обращаемся. /product/{id}/stocks  Query параметры Позволяют фильтровать и сортировать запросы.\nХорошие примеры /products?q=Luke+man поиск продукта по тексту /products?storeId=35 фильтрация продуктов по параметру магазина 35 /products?sort=name\u0026amp;desc=age,id сортировка по возростанию name и убыванию age, а затем id.  Пагинация Хорошие примеры ?page=2\u0026amp;perPage=100 по номеру страницы ?limit=25\u0026amp;before=ZDMyNz6yORI3OTLo по курсору\n?limit=25\u0026amp;offset=50 через оффсет \u0026amp; лимит\n?limit=25\u0026amp;since=1364849754 через временные метки  В качестве ключа для пагинации по временным меткам используется Unix timestamp. Не стоит хранить курсоры: они быстро становятся невалидными из-за вставки или удаления элементов.\nОтвет: Общие правила  Структура ответа HTTP не должна зависеть от структуры БД Все поля должны быть понятны с бизнес точки зрения Все наименования полей должны быть простыми, интуитивными и согласованными Стоит избегать использование технических терминов и специфических терминов систем  Ответ: Статус коды Все методы  Для всех эндпоинтов необходимо возвращать статус коды. Каждый сервис потенциально должен уметь возвращать 500-ки. Каждый сервис, требующий как минимум один обязательный параметр на вход, должен уметь возвращать 400-ки с описанием ошибки Каждый секьюрный сервис должен уметь возвращать 401-ую ошибку.  GET  Каждый сервис в случае отсутствия данных должен возвращать 404 Каждая коллекция обязана вернуть 200, если возвращается полностью Каждая коллекция должна вернуть 206, если возвращается частично  PUT \u0026amp; PATCH:  Каждый запрос, добавляющий обьекты должен возвращать 201.  DELETE  Каждый сервис должен возвращать 204.  Ответ: Коды ошибок Вместе с HTTP кодами ответов в теле необходимо указать код ошибки. Это позволит потребителю понять что именно пошло не так и правильно среагировать. Ответ с ошибкой может содержать бизнес код ошибки с описанием причины падения. Все эти коды должны быть описаны в документации API.\nОдин из популярных форматов описания ошибок JSON-API:\n{ \u0026quot;errors\u0026quot;: [{ \u0026quot;code\u0026quot;: \u0026quot;ERR-01234\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;OAuth Exception\u0026quot;, \u0026quot;details\u0026quot;: \u0026quot;Session has expired at unix time 1385243766.\u0026quot;, \u0026quot;links\u0026quot;: { \u0026quot;about\u0026quot;: \u0026quot;http://example.com/docs/errors/#ERR-01234\u0026quot; } }] } Или вот кусок кода в формате Сваггера с описанием кода ответа и кода ошибок:\n{ Responses: ”200”: description: mySuccessResponse Schema: type: array Items: $ref: “#/definitions/Pet”, “400”: description: Invalid status value } Ответы: Формат данных E.164 – Телефонный номер [+][код страны][код местности][местный номер]\n + знак плюса код страны международный код страны код местности код местности без 0 в начале местный номер местный номер телефона  ISO 639 – Язык  eng – Английский fra – Французский rus – Русский  ISO 3166-1 — Язык  Russia (Russian Federation) Россия RU RUS 643 France Франция FR FRA 250 China Китай CN CHN 156  ISO 8601 – Дата  YYYY-MM 2020-06 YYYYMMDD 20200602 YYYY-MM-DDThh:mm:ss 2020-06-02T15:22:00 YYYY-MM-DDThh:mm:ss±hh 2020-06-02T15:22:00+03:00  ISO 4217 — Деньги  EUR 978 – Евро USD 840 - Доллар США KZT 398 – Тенге BYN 933 - Беларусский Рубль  UCUM – Меры измерения Все меры измерения ищите в UCUM specification.\n","excerpt":"Отлично сконструированный REST API привлекает других разработчиков его использовать. Идеальное API …","ref":"/lmru--tech/ru/api/sync/","title":"Дизайн Принципы Синхронного API"},{"body":"# 30% rule Each engineer may spend 30 percents of his working time on R\u0026amp;D tasks or technical debt reduction.\n← back to Architecture value • or to Technology value\nA After event message After the meeting message contains event log and all desitions made and sent to all participants.\n← back to value\nAvailability of the tools We can take corporate notebooks wherever we want. All tools and environments are available on the internet or through VPN.\n← back to value\nB Blocking code review To not take new task while another issue is ready for code review.\n← back to value\nBORD Once a year feedback session. Used also for yearly goals standing.\n← back to value\nC Communities ← back to value\nD Daily Meeting 15-minute time-boxed event held each day for the team for the next 24 hours work planning. This optimizes team collaboration and performance by inspecting the work since the last Daily and forecasting upcoming work. [scrum guide]\n← back to value\nDevOps A friendship between developers and operations :) If seriously, I would recommend to read this book to understand what is it.\n← back to value\nDid something ask for feedback Short cycles and feedback loops – an ideal picture. The sooner you get the feedback, the faster you can fix the problem.\n← back to value\nE External Configuration A changeable configuration of applications should be stored in the environment.\n← back to value\nF Fail fast rule ← back to value\nH High Cohesion High cohesion is when you have a class (or module) that does a well defined job. Low cohesion is when a class does a lot of jobs that don\u0026rsquo;t have much in common. [source]\n← back to value\nI Internal Rotation Want to change job — ask HR for options.\n← back to value\nK KISS Keep It Stupid Simple. Like Occam said, «entities should not be multiplied without necessity». Adding new levels of abstraction must have a strong reason. Adding new data entities or solution components also must have strong reason. Simplification is a King and we welcome the approach to describe it as an architecture debt and rework the complex areas to make it simple. The decision is made at the level of a technical and solution architect, in controversial situations we made decisions on the Architecture Committee.\n← back to value\nO Onboarding check-list ← back to value\nOnline Meetings Requirement Each meeting accessible remotely by demand.\n← back to value\nOrchestration / Choreography Microservices pattern for building of sequenses of execution (SAGAs). Short explanation here. Detailed here.\n← back to value\nP Planning Special event for planning of the work to be performed. This plan is created by the collaborative work of the entire team. [scrum guide]\n← back to value\nPost Mortem ← back to value\nR Required agenda in invitation Each invitation to the meeting should have agenda and the meeting goal.\n← back to value\nRetrospective The Retro is the event giving an opportunity for the team to inspect itself and create a plan for improvements to be enacted next time. [scrum guide]\n← back to value\nRevenue / Expenses ratio An estimated amount of money earned by product or feature divided on spends on it.\n← back to value\nS Solution Architect Review Also known as Architecture Committee. Enterprise \u0026amp; Solution architects meeting. Held by demand. Leader – CTO.\nMain tasks:\n solution architecture problem solving escalation place for architecture gaps / technical debt grow unblocking issues with technical debt solution architecture consulting  ← back to value\nT Technology Committee ← back to value\n","excerpt":"# 30% rule Each engineer may spend 30 percents of his working time on R\u0026amp;D tasks or technical …","ref":"/lmru--tech/glossary/","title":"Glossary"},{"body":"  #td-cover-block-0 { background-image: url(/lmru--tech/featured-background_hu8c11830916cc20ee91e096dfc71443c0_1860255_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/lmru--tech/featured-background_hu8c11830916cc20ee91e096dfc71443c0_1860255_1920x1080_fill_q75_catmullrom_top.jpg); } }  Welcome to Leroy Merlin Tech  About Company  Our Values   API  Company's engineering culture site\n\n        Leroy Merlin Russia is the leading Do It Yourself retail company.\nWe are making affordable for everyone the repair and improve their homes.\n    Being an IT, we want to build Retailer — technology company-platform.\nOur mission is bring autonomy to product teams, support it with tools and governance to increase productivity and ensure the required level of quality.\n    Our Values\n   People Personal relationship at the first place.\nRead more …\n   Architecture We are building long-term systems and care about technical debt.\nRead more …\n   Technology Сonstantly challenging selection of tools.\nRead more …\n     Work in progress This site is currently under construction. You can improve it with Pull Requests.        Contributions welcome This site generated from GitHub repository. Send a Pull Request for change.\n   Join Leroy Merlin Check out our vacancies.\n   Global community Leroy Merlin is the part of Adeo Group.\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"/lmru--tech/","title":"Leroy Merlin Tech"},{"body":"  #td-cover-block-0 { background-image: url(/lmru--tech/ru/featured-background_hu8c11830916cc20ee91e096dfc71443c0_1860255_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/lmru--tech/ru/featured-background_hu8c11830916cc20ee91e096dfc71443c0_1860255_1920x1080_fill_q75_catmullrom_top.jpg); } }  Добро пожаловать в Леруа Мерлен Tech  О компании  Наши ценности   API  Инженeрный портал компании\n\n        Леруа Мерлен Россия — лидер ритейла в сфере Do It Yourself [определение]\nПомогаем людям во всем мире благоустроить жилье и улучшить качество жизни.\n    Как IT, мы строим Ритейлер — технологическую компанию-платформу.\nНаша миссия – дать автономность продуктовым командам, поддерживать их инструментами и управлением, для того, чтобы увеличить их продуктивность и поддерживать необходимый уровень качества.\n    Наши ценности\n   Люди Человеческие отношения на первом месте.\nRead more …\n   Архитектура Строим долгосрочные решения и работаем над техническим долгом.\nRead more …\n   Технологии Постоянно челленджим выбор технологий.\nRead more …\n     Как говорится, work in progress Над этим сайтом мы усиленно работаем. Помоги нам, отправь Пулл Реквест.        Контрибьюции приветствуются Этот сайт полностью на ридмиках в GitHub Pages. Отправь Пулл Реквест для изменения контента.\n   Го к нам Поищи открытые вакансии.\n   Международное сообщество Входим в группу компаний Adeo Group.\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"/lmru--tech/ru/","title":"Leroy Merlin Tech"}]